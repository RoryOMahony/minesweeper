{"version":3,"sources":["components/Title.js","components/gameboard/Cell.js","objects/GameState.js","objects/GameObject.js","objects/CellObject.js","objects/GameCreator.js","reducers/GameReducer.js","components/gameboard/GameBoard.js","components/gameinfo/NumberDisplay.js","components/gameinfo/GameControl.js","components/gameinfo/GameInfo.js","components/difficulty/GameDifficulty.js","components/difficulty/Difficulties.js","components/difficulty/CustomDifficultyModal.js","components/difficulty/CustomDifficulty.js","components/difficulty/DifficultyContainer.js","components/Minesweeper.js","App.js","serviceWorker.js","index.js"],"names":["Title","text","className","Cell","cell","gameOver","cellSelectedCallBack","rightClickCallBack","doubleClickCallBack","useState","selectingCell","setSelectingCell","borderStyle","display","isMine","selected","backgroundColor","displayValue","aria-hidden","surroundingMines","isFlagged","numberColourClassName","onContextMenu","e","preventDefault","style","onMouseDown","event","buttons","onMouseUp","onMouseEnter","onMouseLeave","onDoubleClick","GAME_STATE","GameObject","board","gameState","numOfMines","flagsAvailable","score","this","setGameState","game","getRowCount","length","getColumnCount","getCell","rowNum","colNum","row","undefined","setCell","getSurroundingCells","cellRowNum","cellColumnNum","rowToCheck","columnToCheck","surroundingCells","i","j","addSurroundingCell","push","CellObject","column","createGameFromDifficulty","gameDifficulty","createGame","rows","columns","mines","rowMap","createRow","createNewGame","numOfColumns","columnMap","containsCell","cells","cellToCheck","some","generateRandomNumber","max","Math","floor","random","BOARD_REDUCER_ACTIONS","GameReducer","state","dispatch","updatedState","type","payload","setCellAsMine","filter","populateSurroundingMines","isGameOver","updatedCell","displayCell","displayAllMines","displayAllValidCells","forEach","calculateGameState","uncoveredCells","decreaseFlagsAvailable","toggleFlagged","setScore","currentCell","gameBoard","allNonMineCellsDisplayed","every","processedCells","Set","cellsToProcess","cellToProcess","pop","has","cellToUncover","add","GameBoard","gameBoardDispatch","handleCellSelected","useCallback","minesToPlace","numOfMinesToPlace","offLimitCell","maxRowNumber","maxColumnNumber","minePlaced","calculateMinesToPlace","handleCellDoubleClick","handleCellRightClick","map","index","key","NumberDisplay","number","toString","padStart","padNumber","GameControl","gameDispatch","iconToDisplayStyle","onClick","GameInfo","GameDifficulty","difficultyInfo","title","DIFFICULTIES","BEGINNER","INTERMEDIATE","EXPERT","CustomDifficultyModal","hideModalCallback","setRows","setColumns","setMines","setInput","input","setterFunction","isNaN","int","parseInt","onSubmit","htmlFor","name","defaultValue","onChange","target","value","CustomDifficulty","show","setShow","DifficultyContainer","Minesweeper","useReducer","useEffect","intervalId","setInterval","clearInterval","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b79e3684.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Flex.css\";\r\n\r\nconst Title = ({ text }) => {\r\n  return (\r\n    <div className=\"flex-row flex-main-axis-center\">\r\n      <h1>{text}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React, { useState } from \"react\";\r\nimport \"./Cell.css\";\r\nimport \"../Flex.css\";\r\n\r\nconst Cell = ({\r\n  cell,\r\n  gameOver,\r\n  cellSelectedCallBack,\r\n  rightClickCallBack,\r\n  doubleClickCallBack\r\n}) => {\r\n  const [selectingCell, setSelectingCell] = useState(false);\r\n\r\n  const calculateBorderStyle = () => {\r\n    if (!cell.display && selectingCell) {\r\n      return {\r\n        borderStyle: \"none\"\r\n      };\r\n    }\r\n\r\n    if (cell.display) {\r\n      if (!cell.isMine || !cell.selected) {\r\n        return {\r\n          borderStyle: \"none\"\r\n        };\r\n      }\r\n\r\n      return {\r\n        borderStyle: \"none\",\r\n        backgroundColor: \"red\"\r\n      };\r\n    }\r\n\r\n    return {\r\n      borderStyle: \"outset\"\r\n    };\r\n  };\r\n\r\n  const calculateDisplayValue = () => {\r\n    if (!cell.display) {\r\n      if (cell.isFlagged) {\r\n        return <i className=\"fa fa-flag cell-icon\" aria-hidden=\"true\"></i>;\r\n      } else {\r\n        return \"\";\r\n      }\r\n    }\r\n\r\n    if (cell.isMine) {\r\n      return <i className=\"fa fa-bomb cell-icon\" aria-hidden=\"true\"></i>;\r\n    }\r\n\r\n    return cell.surroundingMines === 0 ? \"\" : cell.surroundingMines;\r\n  };\r\n\r\n  const borderStyle = calculateBorderStyle();\r\n  const displayValue = calculateDisplayValue();\r\n\r\n  const numberColourClassName =\r\n    cell.isMine || cell.isFlagged ? \"\" : `number-${cell.surroundingMines}`;\r\n\r\n  function handleRightClick(event) {\r\n    event.preventDefault();\r\n  }\r\n\r\n  function handleDoubleClick() {\r\n    if (!gameOver && cell.display && !cell.isMine) {\r\n      doubleClickCallBack(cell);\r\n    }\r\n  }\r\n\r\n  function handleMouseDown(event) {\r\n    if (gameOver) {\r\n      return;\r\n    }\r\n\r\n    if (event.buttons === 1 && !cell.isFlagged) {\r\n      // Left click\r\n      setSelectingCell(true);\r\n    } else if (event.buttons === 2 && !cell.display) {\r\n      // Right click\r\n      rightClickCallBack(cell);\r\n    }\r\n  }\r\n\r\n  function handleMouseUp() {\r\n    if (selectingCell && !cell.display && !cell.isFlagged) {\r\n      cellSelectedCallBack(cell);\r\n    }\r\n  }\r\n\r\n  function handleMouseEnter(event) {\r\n    if (gameOver) {\r\n      return;\r\n    }\r\n    if (event.buttons === 1 && !cell.isFlagged) {\r\n      // Left click\r\n      setSelectingCell(true);\r\n    }\r\n  }\r\n\r\n  function handleMouseLeave() {\r\n    setSelectingCell(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"cell-container\" onContextMenu={e => handleRightClick(e)}>\r\n      <div\r\n        style={borderStyle}\r\n        className={`cell flex-row flex-main-axis-center flex-cross-axis-center noselect ${numberColourClassName}`}\r\n        onMouseDown={e => handleMouseDown(e)}\r\n        onMouseUp={handleMouseUp}\r\n        onMouseEnter={e => handleMouseEnter(e)}\r\n        onMouseLeave={handleMouseLeave}\r\n        onDoubleClick={handleDoubleClick}\r\n      >\r\n        {displayValue}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","export const GAME_STATE = {\r\n  LOST: \"LOST\",\r\n  WON: \"WON\",\r\n  IN_PROGRESS: \"IN_PROGRESS\",\r\n  NOT_STARTED: \"NOT_STARTED\"\r\n};\r\n","import { GAME_STATE } from \"./GameState\";\r\n\r\nexport default class GameObject {\r\n  gameState = GAME_STATE.NOT_STARTED;\r\n  numOfMines = 0;\r\n  flagsAvailable = 0;\r\n  score = 0;\r\n\r\n  constructor(board) {\r\n    this.board = board;\r\n  }\r\n}\r\n\r\nexport function setGameState(game, gameState) {\r\n  game.gameState = gameState;\r\n}\r\n\r\nexport function setScore(game, score){\r\n  game.score = score;\r\n}\r\n\r\nexport function decreaseFlagsAvailable(game){\r\n  game.flagsAvailable -= 1;\r\n}\r\n\r\nexport function increaseFlagsAvailable(game){\r\n  game.flagsAvailable += 1;\r\n}\r\n\r\nexport function getRowCount(board) {\r\n  return board.length;\r\n}\r\n\r\nexport function getColumnCount(board) {\r\n  const rowCount = getRowCount(board);\r\n  if (rowCount === 0) {\r\n    return 0;\r\n  }\r\n  return board[0].length;\r\n}\r\n\r\nexport function getCell(board, rowNum, colNum) {\r\n  const row = board[rowNum];\r\n  if (row === undefined) {\r\n    return undefined;\r\n  }\r\n  return row[colNum];\r\n}\r\n\r\nexport function setCell(board, rowNum, colNum, cell) {\r\n  const row = board[rowNum];\r\n  if (row === undefined) {\r\n    return;\r\n  }\r\n  row[colNum] = cell;\r\n}\r\n\r\nexport function getSurroundingCells(board, cellRowNum, cellColumnNum) {\r\n  let rowToCheck = cellRowNum - 1;\r\n  let columnToCheck = cellColumnNum - 1;\r\n\r\n  const surroundingCells = [];\r\n\r\n  for (let i = rowToCheck; i < rowToCheck + 3; i++) {\r\n    for (let j = columnToCheck; j < columnToCheck + 3; j++) {\r\n      addSurroundingCell(\r\n        cellRowNum,\r\n        cellColumnNum,\r\n        i,\r\n        j,\r\n        surroundingCells,\r\n        board\r\n      );\r\n    }\r\n  }\r\n\r\n  return surroundingCells;\r\n}\r\n\r\nfunction addSurroundingCell(\r\n  cellRowNum,\r\n  cellColumnNum,\r\n  rowToCheck,\r\n  columnToCheck,\r\n  surroundingCells,\r\n  board\r\n) {\r\n  if (cellRowNum !== rowToCheck || cellColumnNum !== columnToCheck) {\r\n    const cell = getCell(board, rowToCheck, columnToCheck);\r\n    if (cell !== undefined) {\r\n      surroundingCells.push(cell);\r\n    }\r\n  }\r\n}\r\n","export default class CellObject {\r\n  row;\r\n  column;\r\n  selected = false;\r\n  display = false;\r\n  isMine = false;\r\n  isFlagged = false;\r\n  surroundingMines;\r\n\r\n  constructor(row, column) {\r\n    this.row = row;\r\n    this.column = column;\r\n  }\r\n}\r\n","import CellObject from \"./CellObject\";\r\nimport GameObject, {\r\n  getRowCount,\r\n  getColumnCount,\r\n  getCell,\r\n  getSurroundingCells\r\n} from \"./GameObject\";\r\n\r\nexport function createGameFromDifficulty(gameDifficulty) {\r\n  const { rows, columns, mines } = gameDifficulty;\r\n  return createGame(rows, columns, mines);\r\n}\r\n\r\nexport function createGame(rows, columns, mines) {\r\n  const game = createNewGame(rows, columns);\r\n  game.numOfMines = mines;\r\n  game.flagsAvailable = mines;\r\n  return game;\r\n}\r\n\r\nfunction createNewGame(rows, columns) {\r\n  let rowMap = [];\r\n\r\n  for (let i = 0; i < rows; i++) {\r\n    let row = createRow(i, columns);\r\n    rowMap.push(row);\r\n  }\r\n\r\n  return new GameObject(rowMap);\r\n}\r\n\r\nfunction createRow(row, numOfColumns) {\r\n  let columnMap = [];\r\n  for (let i = 0; i < numOfColumns; i++) {\r\n    columnMap.push(new CellObject(row, i));\r\n  }\r\n  return columnMap;\r\n}\r\n\r\nexport function calculateMinesToPlace(board, numOfMinesToPlace, offLimitCell) {\r\n  const maxRowNumber = getRowCount(board);\r\n  const maxColumnNumber = getColumnCount(board);\r\n\r\n  const mines = [];\r\n\r\n  for (let i = 0; i < numOfMinesToPlace; i++) {\r\n    let minePlaced = false;\r\n    while (!minePlaced) {\r\n      const row = generateRandomNumber(maxRowNumber);\r\n      const column = generateRandomNumber(maxColumnNumber);\r\n      if (row === offLimitCell.row && column === offLimitCell.column) {\r\n        continue;\r\n      }\r\n      const cell = getCell(board, row, column);\r\n      if (!containsCell(mines, cell)) {\r\n        cell.isMine = true;\r\n        mines.push(cell);\r\n        minePlaced = true;\r\n      }\r\n    }\r\n  }\r\n  return mines;\r\n}\r\n\r\nfunction containsCell(cells, cellToCheck) {\r\n  return cells.some(\r\n    cell => cell.row === cellToCheck.row && cell.column === cellToCheck.column\r\n  );\r\n}\r\n\r\nfunction generateRandomNumber(max) {\r\n  return Math.floor(Math.random() * max);\r\n}\r\n\r\nexport function populateSurroundingMines(board) {\r\n  const rows = getRowCount(board);\r\n  const columns = getColumnCount(board);\r\n\r\n  for (let row = 0; row < rows; row++) {\r\n    for (let column = 0; column < columns; column++) {\r\n      const cell = getCell(board, row, column);\r\n      const surroundingCells = getSurroundingCells(board, row, column);\r\n      cell.surroundingMines = countMines(surroundingCells);\r\n    }\r\n  }\r\n}\r\n\r\nfunction countMines(cells) {\r\n  return cells.filter(cell => cell.isMine).length;\r\n}\r\n","import {\r\n  getCell,\r\n  setCell,\r\n  getSurroundingCells,\r\n  setGameState,\r\n  increaseFlagsAvailable,\r\n  decreaseFlagsAvailable,\r\n  setScore,\r\n  getRowCount,\r\n  getColumnCount\r\n} from \"../objects/GameObject\";\r\nimport { GAME_STATE } from \"../objects/GameState\";\r\nimport {\r\n  populateSurroundingMines,\r\n  createGameFromDifficulty,\r\n  createGame\r\n} from \"../objects/GameCreator\";\r\n\r\nexport const BOARD_REDUCER_ACTIONS = {\r\n  INITIALISE_GAME: \"INITIALISE_GAME\",\r\n  DISPLAY_CELL: \"DISPLAY_CELL\",\r\n  DISPLAY_SURROUNDING_CELLS: \"DISPLAY_SURROUNDING_CELLS\",\r\n  TOGGLE_FLAGGED: \"TOGGLE_FLAGGED\",\r\n  INCREASE_SCORE: \"INCREASE_SCORE\",\r\n  RESET_GAME: \"RESET_GAME\",\r\n  CHANGE_DIFFICULTY: \"CHANGE_DIFFICULTY\"\r\n};\r\n\r\nexport const GameReducer = (state, dispatch) => {\r\n  const updatedState = { ...state };\r\n\r\n  switch (dispatch.type) {\r\n    case BOARD_REDUCER_ACTIONS.INITIALISE_GAME:\r\n      for (let mineToPlace of dispatch.payload) {\r\n        setCellAsMine(mineToPlace, updatedState.board);\r\n      }\r\n      populateSurroundingMines(updatedState.board);\r\n      setGameState(updatedState, GAME_STATE.IN_PROGRESS);\r\n      return updatedState;\r\n\r\n    case BOARD_REDUCER_ACTIONS.DISPLAY_CELL:\r\n      if (isGameOver(updatedState)) {\r\n        return updatedState;\r\n      }\r\n\r\n      const updatedCell = displayCell(dispatch.payload, updatedState.board);\r\n      updatedCell.selected = true;\r\n\r\n      if (updatedCell.isMine) {\r\n        setGameState(updatedState, GAME_STATE.LOST);\r\n        displayAllMines(updatedState);\r\n      } else {\r\n        if (updatedCell.surroundingMines === 0) {\r\n          const uncoveredCells = displayAllValidCells(\r\n            updatedCell,\r\n            updatedState.board\r\n          );\r\n          uncoveredCells.forEach(cell => displayCell(cell, updatedState.board));\r\n        }\r\n        setGameState(updatedState, calculateGameState(updatedState));\r\n      }\r\n\r\n      return updatedState;\r\n\r\n    case BOARD_REDUCER_ACTIONS.DISPLAY_SURROUNDING_CELLS:\r\n      if (isGameOver(updatedState)) {\r\n        return updatedState;\r\n      }\r\n\r\n      const { row, column } = dispatch.payload;\r\n      const surroundingCells = getSurroundingCells(\r\n        updatedState.board,\r\n        row,\r\n        column\r\n      );\r\n      const flaggedSurroundingCells = surroundingCells.filter(\r\n        cell => cell.isFlagged\r\n      );\r\n\r\n      if (\r\n        flaggedSurroundingCells.length === dispatch.payload.surroundingMines\r\n      ) {\r\n        const uncoveredCells = displayAllValidCells(\r\n          dispatch.payload,\r\n          updatedState.board\r\n        );\r\n        uncoveredCells.forEach(cell => displayCell(cell, updatedState.board));\r\n        uncoveredCells\r\n          .filter(cell => cell.isMine)\r\n          .forEach(cell => (cell.selected = true));\r\n\r\n        setGameState(updatedState, calculateGameState(updatedState));\r\n      }\r\n\r\n      if (updatedState.gameState === GAME_STATE.LOST) {\r\n        displayAllMines(updatedState);\r\n      }\r\n\r\n      return updatedState;\r\n\r\n    case BOARD_REDUCER_ACTIONS.TOGGLE_FLAGGED:\r\n      if (isGameOver(updatedState)) {\r\n        return updatedState;\r\n      }\r\n\r\n      if (dispatch.payload.isFlagged) {\r\n        increaseFlagsAvailable(updatedState);\r\n      } else {\r\n        decreaseFlagsAvailable(updatedState);\r\n      }\r\n\r\n      toggleFlagged(dispatch.payload, updatedState.board);\r\n      return updatedState;\r\n\r\n    case BOARD_REDUCER_ACTIONS.INCREASE_SCORE:\r\n      setScore(updatedState, updatedState.score + 1);\r\n      return updatedState;\r\n\r\n    case BOARD_REDUCER_ACTIONS.RESET_GAME:\r\n      let rows = getRowCount(updatedState.board);\r\n      let columns = getColumnCount(updatedState.board);\r\n      return createGame(rows, columns, updatedState.numOfMines);\r\n\r\n    case BOARD_REDUCER_ACTIONS.CHANGE_DIFFICULTY:\r\n      return createGameFromDifficulty(dispatch.payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction toggleFlagged(cell, board) {\r\n  const { row, column } = cell;\r\n  const updatedCell = { ...cell, isFlagged: !cell.isFlagged };\r\n  setCell(board, row, column, updatedCell);\r\n}\r\n\r\nfunction displayCell(cell, board) {\r\n  const currentCell = getCell(board, cell.row, cell.column);\r\n  const updatedCell = { ...currentCell, display: true };\r\n  setCell(board, updatedCell.row, updatedCell.column, updatedCell);\r\n  return updatedCell;\r\n}\r\n\r\nfunction setCellAsMine(cell, board) {\r\n  const currentCell = getCell(board, cell.row, cell.column);\r\n  const updatedCell = { ...currentCell, isMine: true };\r\n  setCell(board, updatedCell.row, updatedCell.column, updatedCell);\r\n  return updatedCell;\r\n}\r\n\r\nfunction isGameOver(gameBoard) {\r\n  return (\r\n    gameBoard.gameState === GAME_STATE.LOST ||\r\n    gameBoard.gameState === GAME_STATE.WON\r\n  );\r\n}\r\n\r\nfunction displayAllMines(game) {\r\n  for (let row of game.board) {\r\n    row.filter(cell => cell.isMine).forEach(cell => (cell.display = true));\r\n  }\r\n}\r\n\r\nfunction calculateGameState(gameBoard) {\r\n  let allNonMineCellsDisplayed = true;\r\n\r\n  for (let row of gameBoard.board) {\r\n    const mineInRowDisplayed = row\r\n      .filter(cell => cell.isMine)\r\n      .some(cell => cell.display);\r\n\r\n    if (mineInRowDisplayed) {\r\n      return GAME_STATE.LOST;\r\n    }\r\n\r\n    const allNonMineCellsInRowDisplayed = row\r\n      .filter(cell => !cell.isMine)\r\n      .every(cell => cell.display);\r\n    if (!allNonMineCellsInRowDisplayed) {\r\n      allNonMineCellsDisplayed = false;\r\n    }\r\n  }\r\n\r\n  return allNonMineCellsDisplayed ? GAME_STATE.WON : GAME_STATE.IN_PROGRESS;\r\n}\r\n\r\nfunction displayAllValidCells(cell, gameBoard) {\r\n  const processedCells = new Set();\r\n  const cellsToProcess = [cell];\r\n\r\n  while (cellsToProcess.length !== 0) {\r\n    const cellToProcess = cellsToProcess.pop();\r\n    if (processedCells.has(cellToProcess)) {\r\n      continue;\r\n    }\r\n\r\n    const surroundingCells = getSurroundingCells(\r\n      gameBoard,\r\n      cellToProcess.row,\r\n      cellToProcess.column\r\n    );\r\n    surroundingCells\r\n      .filter(\r\n        cellToUncover => !cellToUncover.isFlagged && !cellToUncover.display\r\n      )\r\n      .forEach(cellToUncover => {\r\n        cellToUncover.display = true;\r\n        if (cellToUncover.surroundingMines === 0) {\r\n          cellsToProcess.push(cellToUncover);\r\n        }\r\n      });\r\n\r\n    processedCells.add(cellToProcess);\r\n  }\r\n\r\n  return [...processedCells];\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport \"../Flex.css\";\r\nimport \"./GameBoard.css\";\r\nimport { BOARD_REDUCER_ACTIONS } from \"../../reducers/GameReducer\";\r\nimport { GAME_STATE } from \"../../objects/GameState\";\r\nimport { calculateMinesToPlace } from \"../../objects/GameCreator\";\r\n\r\nconst GameBoard = ({ gameState, gameBoard, numOfMines, gameBoardDispatch }) => {\r\n  const handleCellSelected = useCallback(\r\n    cell => {\r\n      if (gameState === GAME_STATE.NOT_STARTED) {\r\n        const minesToPlace = calculateMinesToPlace(gameBoard, numOfMines, cell);\r\n\r\n        gameBoardDispatch({\r\n          type: BOARD_REDUCER_ACTIONS.INITIALISE_GAME,\r\n          payload: minesToPlace\r\n        });\r\n      }\r\n\r\n      gameBoardDispatch({\r\n        type: BOARD_REDUCER_ACTIONS.DISPLAY_CELL,\r\n        payload: cell\r\n      });\r\n    },\r\n    [gameBoardDispatch, gameState, gameBoard, numOfMines]\r\n  );\r\n\r\n  const handleCellDoubleClick = useCallback(\r\n    cell => {\r\n      gameBoardDispatch({\r\n        type: BOARD_REDUCER_ACTIONS.DISPLAY_SURROUNDING_CELLS,\r\n        payload: cell\r\n      });\r\n    },\r\n    [gameBoardDispatch]\r\n  );\r\n\r\n  const handleCellRightClick = useCallback(\r\n    cell => {\r\n      gameBoardDispatch({\r\n        type: BOARD_REDUCER_ACTIONS.TOGGLE_FLAGGED,\r\n        payload: cell\r\n      });\r\n    },\r\n    [gameBoardDispatch]\r\n  );\r\n\r\n  const gameOver =\r\n    gameState === GAME_STATE.LOST || gameState === GAME_STATE.WON;\r\n\r\n  return (\r\n      <div className=\"flex-column game-board-container\">\r\n        {gameBoard.map((row, index) => {\r\n          const column = row.map(cell => {\r\n            return (\r\n              <Cell\r\n                cell={cell}\r\n                gameOver={gameOver}\r\n                cellSelectedCallBack={handleCellSelected}\r\n                rightClickCallBack={handleCellRightClick}\r\n                doubleClickCallBack={handleCellDoubleClick}\r\n                key={cell.column}\r\n              ></Cell>\r\n            );\r\n          });\r\n          return (\r\n            <div className=\"flex-row\" key={index}>\r\n              {column}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n","import React from \"react\";\r\nimport \"./NumberDisplay.css\";\r\nimport \"../Flex.css\";\r\n\r\nconst NumberDisplay = ({ number }) => {\r\n  function padNumber(number) {\r\n    if (number < 0) {\r\n      const positiveNum = number * -1;\r\n      const paddedNum = positiveNum.toString().padStart(2, 0);\r\n      return \"-\" + paddedNum;\r\n    }\r\n    return number.toString().padStart(3, 0);\r\n  }\r\n\r\n  const displayValue = padNumber(number);\r\n\r\n  return (\r\n    <div\r\n      className={`number-display flex-row flex-main-axis-center flex-cross-axis-center`}\r\n    >\r\n      {displayValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import React from \"react\";\r\nimport \"../gameboard/Cell.css\";\r\nimport \"../Flex.css\";\r\nimport \"./GameControl.css\";\r\nimport { GAME_STATE } from \"../../objects/GameState\";\r\nimport { BOARD_REDUCER_ACTIONS } from \"../../reducers/GameReducer\";\r\n\r\nconst GameControl = ({ gameState, gameDispatch }) => {\r\n  function handleClick() {\r\n    gameDispatch({\r\n      type: BOARD_REDUCER_ACTIONS.RESET_GAME\r\n    });\r\n  }\r\n\r\n  function calculateDisplayStyle() {\r\n    if (gameState === GAME_STATE.LOST) {\r\n      return \"fa-frown-o\";\r\n    }\r\n    if (gameState === GAME_STATE.WON) {\r\n      return \"fa-trophy\";\r\n    }\r\n    return \"fa-smile-o\";\r\n  }\r\n\r\n  const iconToDisplayStyle = calculateDisplayStyle();\r\n\r\n  return (\r\n    <div className=\"flex-row flex-main-axis-center flex-cross-axis-center\">\r\n      <div className=\"cell-container\" onClick={handleClick}>\r\n        <div className=\"cell game-control flex-row flex-main-axis-center flex-cross-axis-center noselect\">\r\n          <i className={`fa ${iconToDisplayStyle}`} aria-hidden=\"true\"></i>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameControl;\r\n","import React from \"react\";\r\nimport \"../Flex.css\";\r\nimport \"./GameInfo.css\";\r\nimport NumberDisplay from \"./NumberDisplay\";\r\nimport GameControl from \"./GameControl\";\r\n\r\nconst GameInfo = ({ game, gameDispatch }) => {\r\n  return (\r\n    <div className=\"flex-row flex-main-axis-space-between game-info\">\r\n      <NumberDisplay number={game.flagsAvailable}></NumberDisplay>\r\n      <GameControl\r\n        gameState={game.gameState}\r\n        gameDispatch={gameDispatch}\r\n      ></GameControl>\r\n      <NumberDisplay number={game.score}></NumberDisplay>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameInfo;\r\n","import React from \"react\";\r\nimport { BOARD_REDUCER_ACTIONS } from \"../../reducers/GameReducer\";\r\n\r\nexport const GameDifficulty = ({ difficultyInfo, gameDispatch }) => {\r\n  function handleClick() {\r\n    gameDispatch({\r\n      type: BOARD_REDUCER_ACTIONS.CHANGE_DIFFICULTY,\r\n      payload: difficultyInfo\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleClick}>{difficultyInfo.title}</button>\r\n    </div>\r\n  );\r\n};\r\n","export const DIFFICULTIES = {\r\n  BEGINNER: {\r\n    title: \"Beginner\",\r\n    rows: 10,\r\n    columns: 10,\r\n    mines: 10\r\n  },\r\n  INTERMEDIATE: {\r\n    title: \"Intermediate\",\r\n    rows: 16,\r\n    columns: 16,\r\n    mines: 40\r\n  },\r\n  EXPERT: {\r\n    title: \"Expert\",\r\n    rows: 16,\r\n    columns: 30,\r\n    mines: 99\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { BOARD_REDUCER_ACTIONS } from \"../../reducers/GameReducer\";\r\nimport { DIFFICULTIES } from \"./Difficulties\";\r\nimport \"./CustomDifficultyModal.css\";\r\n\r\nexport const CustomDifficultyModal = ({ gameDispatch, hideModalCallback }) => {\r\n  const [rows, setRows] = useState(DIFFICULTIES.BEGINNER.rows);\r\n  const [columns, setColumns] = useState(DIFFICULTIES.BEGINNER.columns);\r\n  const [mines, setMines] = useState(DIFFICULTIES.BEGINNER.mines);\r\n\r\n  function setInput(input, setterFunction) {\r\n    if (isNaN(input)) {\r\n      return;\r\n    }\r\n\r\n    const int = parseInt(input);\r\n    if (int <= 0) {\r\n      return;\r\n    }\r\n    setterFunction(int);\r\n  }\r\n\r\n  function handleCancel() {\r\n    hideModalCallback();\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const cells = rows * columns;\r\n    if (mines >= cells) {\r\n      return;\r\n    }\r\n\r\n    gameDispatch({\r\n      type: BOARD_REDUCER_ACTIONS.CHANGE_DIFFICULTY,\r\n      payload: {\r\n        rows: rows,\r\n        columns: columns,\r\n        mines: mines\r\n      }\r\n    });\r\n    hideModalCallback();\r\n  }\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content custom-difficulty-modal\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"custom-difficulty-form-row\">\r\n            <label htmlFor=\"rows\">Rows</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"rows\"\r\n              defaultValue={rows}\r\n              onChange={e => setInput(e.target.value, value => setRows(value))}\r\n            />\r\n          </div>\r\n          <div className=\"custom-difficulty-form-row\">\r\n            <label htmlFor=\"columns\">Columns</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"columns\"\r\n              defaultValue={columns}\r\n              onChange={e =>\r\n                setInput(e.target.value, value => setColumns(value))\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"custom-difficulty-form-row\">\r\n            <label htmlFor=\"mines\">Mines</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"mines\"\r\n              defaultValue={mines}\r\n              onChange={e => setInput(e.target.value, value => setMines(value))}\r\n            />\r\n          </div>\r\n          <div className=\"custom-difficulty-form-controls\">\r\n            <input\r\n              className=\"custom-difficulty-form-control\"\r\n              type=\"button\"\r\n              value=\"Cancel\"\r\n              onClick={handleCancel}\r\n            />\r\n            <input\r\n              className=\"custom-difficulty-form-control\"\r\n              type=\"submit\"\r\n              value=\"Submit\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { CustomDifficultyModal } from \"./CustomDifficultyModal\";\r\n\r\nexport const CustomDifficulty = ({ gameDispatch }) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const hideModalCallback = useCallback(() => {\r\n    setShow(false);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setShow(true)}>Custom</button>\r\n      {show && (\r\n        <CustomDifficultyModal\r\n          gameDispatch={gameDispatch}\r\n          hideModalCallback={hideModalCallback}\r\n        ></CustomDifficultyModal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { GameDifficulty } from \"./GameDifficulty\";\r\nimport { DIFFICULTIES } from \"./Difficulties\";\r\nimport { CustomDifficulty } from \"./CustomDifficulty\";\r\nimport \"../Flex.css\";\r\nimport \"./DifficultyContainer.css\";\r\n\r\nexport const DifficultyContainer = ({ gameDispatch }) => {\r\n  return (\r\n    <div className=\"flex-row flex-main-axis-center\">\r\n      <div className=\"difficulty-container-item\">\r\n        <GameDifficulty\r\n          className=\"difficulty-container-item\"\r\n          gameDispatch={gameDispatch}\r\n          difficultyInfo={DIFFICULTIES.BEGINNER}\r\n        ></GameDifficulty>\r\n      </div>\r\n      <div className=\"difficulty-container-item\">\r\n        <GameDifficulty\r\n          className=\"difficulty-container-item\"\r\n          gameDispatch={gameDispatch}\r\n          difficultyInfo={DIFFICULTIES.INTERMEDIATE}\r\n        ></GameDifficulty>\r\n      </div>\r\n      <div className=\"difficulty-container-item\">\r\n        <GameDifficulty\r\n          className=\"difficulty-container-item\"\r\n          gameDispatch={gameDispatch}\r\n          difficultyInfo={DIFFICULTIES.EXPERT}\r\n        ></GameDifficulty>\r\n      </div>\r\n      <div className=\"difficulty-container-item\">\r\n        <CustomDifficulty\r\n          className=\"difficulty-container-item\"\r\n          gameDispatch={gameDispatch}\r\n        ></CustomDifficulty>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useReducer, useEffect } from \"react\";\r\nimport GameBoard from \"./gameboard/GameBoard\";\r\nimport { createGameFromDifficulty } from \"../objects/GameCreator\";\r\nimport \"./Minesweeper.css\";\r\nimport \"./Flex.css\";\r\nimport { GameReducer, BOARD_REDUCER_ACTIONS } from \"../reducers/GameReducer\";\r\nimport GameInfo from \"./gameinfo/GameInfo\";\r\nimport { GAME_STATE } from \"../objects/GameState\";\r\nimport { DifficultyContainer } from \"./difficulty/DifficultyContainer\";\r\nimport { DIFFICULTIES } from \"./difficulty/Difficulties\";\r\n\r\nexport const Minesweeper = () => {\r\n  const [game, gameDispatch] = useReducer(\r\n    GameReducer,\r\n    createGameFromDifficulty(DIFFICULTIES.BEGINNER)\r\n  );\r\n\r\n  useEffect(() => {\r\n    let intervalId;\r\n    if (game.gameState === GAME_STATE.IN_PROGRESS) {\r\n      intervalId = setInterval(() => {\r\n        gameDispatch({\r\n          type: BOARD_REDUCER_ACTIONS.INCREASE_SCORE\r\n        });\r\n      }, 1000);\r\n    }\r\n    return () => {\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n      }\r\n    };\r\n  }, [game.gameState]);\r\n\r\n  return (\r\n    <div className=\"flex-column flex-cross-axis-center\">\r\n      <div>\r\n        <DifficultyContainer gameDispatch={gameDispatch}></DifficultyContainer>\r\n      </div>\r\n      <div id=\"game\">\r\n        <GameInfo game={game} gameDispatch={gameDispatch}></GameInfo>\r\n        <GameBoard\r\n          gameState={game.gameState}\r\n          gameBoard={game.board}\r\n          numOfMines={game.numOfMines}\r\n          gameBoardDispatch={gameDispatch}\r\n        ></GameBoard>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Title from \"./components/Title\";\nimport { Minesweeper } from \"./components/Minesweeper\";\nimport \"./components/Flex.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div id=\"title-container\">\n        <Title text=\"Minesweeper\"></Title>\n      </div>\n      <div id=\"game-container\" className=\"flex-row flex-main-axis-center\">\n        <Minesweeper></Minesweeper>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}